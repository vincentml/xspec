Testing Schematron
============================

A unit test framework for Schematron based on XSpec.


Running the tutorial examples
-----------------------------

Before you begin, you may need to set an environment variable to tell XSpec where to find Saxon. For example: 

    set SAXON_CP=C:\Programs\saxon\saxon9he.jar

Using xspec.bat or xspec.sh, use the -s parameter to specify a Schematron Unit Test, and give the path to a Schematron Unit Test file. The demo examples in the tutorial folder can be run by:

    bin\xspec.bat -s tutorial\schematron\demo-01.xspec
    bin\xspec.bat -s tutorial\schematron\demo-02-PhaseA.xspec
    bin\xspec.bat -s tutorial\schematron\demo-02-PhaseB.xspec
    bin\xspec.bat -s tutorial\schematron\demo-03.xspec

Test results will be written to tutorial\schematron\xspec as 

    demo-01-result.html
    demo-02-PhaseA-result.html
    demo-02-PhaseB-result.html
    demo-03-result.html



Writing tests
-------------

Unit tests are written in an XML document that adheres to the RelaxNG schema xspec.rnc. In the Schematron every assert and report element should have an id attribute so that it can be matched to expectations in the test scenarios. It is possible to test Schematrons that do not have an id attribute on every assert and report, however it is helpful if the id attribute is used.

The root element of a test file is `description`. For a Schematron test, the `description` element must have attribute `schematron` which specifies the path to the Schematron file to test. An optional attribute `phase` can be used to specify a particular Schematron phase to be tested. For example:

    <x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" schematron="filename.sch">

Just like in XSpec, tests are written using `scenario` elements. Each scenario should have a label that describes it. As you would expect, scenarios can be nested, shared, focused, and pending.

    <x:scenario label="description"> 

The `context` element is used to provide XML to be validated by the Schematron for a particular test scenario. The context XML can be provided in a separate file that is specified by an href attribute.

    <x:context href="filename.xml">

Alternatively, context given as an XML fragment within the `context` element.

    <x:context>
      <example>any XML</example>
    </x:context>  

Assertions specify the results that are expected when the context XML is validated by the Schematron. Assertions are written using any combination of expect-* elements to specify expected results of running the Schematron on the context XML.

* `expect-valid` - Verify that a Schematron executed and passed validation. In the Schematron an `assert` or `report` can have a `role` attribute specifying that it is a warning or informational message and these are considered to be allowed for a passing validation. 
* `expect-assert` - Verify that an `assert` will be thrown.
* `expect-not-assert` - Verify that an `assert` will not be thrown.
* `expect-report` - Verify that a `report` will be thrown.
* `expect-not-report` - Verify that a `report` will not be thrown.

With the exception of `expect-valid`, the expect-* elements all use the same attributes to identify an expected `assert` or `report`. These attributes can be used in any combination to specify the expected results of running the Schematron on the context XML: 

* `id` - Identify a specific `assert` or `report` using its `id` attribute.
* `role` - Match a specific `role` attribute value of an `assert` or `report`. Role attribute values are often used to specify 'error', 'fatal', 'warn', 'warning', 'info', 'information'. 
* `location` - XPath of a location in the context XML that the `assert` or `report` is expected to find. 

For example, say you expect an `assert` with id a0001 to be thrown at XPath location /html[1]/body[1]/div[5]. This assertion would be written as:

    <x:expect-assert id="a0001" location="/html[1]/body[1]/div[5]"/>

It is possible to import scenarios from a separate file. This allows more flexibility for organizing your test cases. To import scenarios from another file use the `import` element and specify the file to import using the `href` attribute. 

    <x:import href="filename.xspec"/>

Anything that can be done in XSpec can be done in a Schematron unit test. It is possible to test XSLT function definitions (xsl:function) that are embedded in a Schematron. A test scenario can also check the SVRL output of Schematron for specific things.

When the test is executed, each scenario will be evaluated by using the Schematron to validate the context XML and then checking the validation result to find out if it matches the assertions. 
