<?xml version="1.0" encoding="UTF-8"?><x:description xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="schut-to-xspec-test.sch.xsl"><x:scenario label="Schematron: &#34;schut-to-xspec-012.sch&#34; phase: #ALL"/>
    <x:scenario label="expect-valid">
        <x:context href="schematron/schut-to-xspec-012-01.xml"/>
        <x:expect label="valid" test="boolean(svrl:schematron-output[svrl:fired-rule]) and                 not(boolean((svrl:schematron-output/svrl:failed-assert union svrl:schematron-output/svrl:successful-report)[                 not(@role) or @role = ('error','fatal')]))"/>
    </x:scenario>
    <x:scenario label="assertions">
        <x:scenario label="without attributes">
            <x:scenario label="not thrown">
                <x:context href="schematron/schut-to-xspec-012-01.xml"/>
                <x:expect label="not assert" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert)"/>
                <x:expect label="not report" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report)"/>
            </x:scenario>
            <x:scenario label="thrown">
                <x:context href="schematron/schut-to-xspec-012-02.xml"/>
                <x:expect label="assert" test="exists(svrl:schematron-output/svrl:failed-assert)"/>
                <x:expect label="report" test="exists(svrl:schematron-output/svrl:successful-report)"/>
            </x:scenario>
        </x:scenario>
        <x:scenario label="with id">
            <x:context href="schematron/schut-to-xspec-012-02.xml"/>
            <x:expect label="assert a1" test="exists(svrl:schematron-output/svrl:failed-assert[@id = 'a1'])"/>
            <x:expect label="not assert a2" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[@id = 'a2'])"/>
            <x:expect label="report r1" test="exists(svrl:schematron-output/svrl:successful-report[@id = 'r1'])"/>
            <x:expect label="not report r2" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[@id = 'r2'])"/>
        </x:scenario>
        <x:scenario label="with role">
            <x:context href="schematron/schut-to-xspec-012-02.xml"/>
            <x:expect label="assert warn" test="exists(svrl:schematron-output/svrl:failed-assert[@role = 'warn'])"/>
            <x:expect label="not assert fatal" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[@role = 'fatal'])"/>
            <x:expect label="report warn" test="exists(svrl:schematron-output/svrl:successful-report[@role = 'warn'])"/>
            <x:expect label="not report info" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[@role = 'info'])"/>
        </x:scenario>
        <x:scenario label="with location">
            <x:context href="schematron/schut-to-xspec-012-02.xml"/>
            <x:expect label="assert /article[1]/div[1]" test="exists(svrl:schematron-output/svrl:failed-assert[@location = '/article[1]/div[1]'])"/>
            <x:expect label="not assert /article[1]/div[2]" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[@location = '/article[1]/div[2]'])"/>
            <x:expect label="report /article[1]/div[3]" test="exists(svrl:schematron-output/svrl:successful-report[@location = '/article[1]/div[3]'])"/>
            <x:expect label="not report /article[1]/div[4]" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[@location = '/article[1]/div[4]'])"/>
        </x:scenario>
        <x:scenario label="with id, location">
            <x:context href="schematron/schut-to-xspec-012-02.xml"/>
            <x:expect label="assert a1 /article[1]/div[1]" test="exists(svrl:schematron-output/svrl:failed-assert[@id = 'a1'][@location = '/article[1]/div[1]'])"/>
            <x:expect label="not assert a2 /article[1]/div[2]" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[@id = 'a2'][@location = '/article[1]/div[2]'])"/>
            <x:expect label="report r1 /article[1]/div[3]" test="exists(svrl:schematron-output/svrl:successful-report[@id = 'r1'][@location = '/article[1]/div[3]'])"/>
            <x:expect label="not report r2 /article[1]/div[4]" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[@id = 'r2'][@location = '/article[1]/div[4]'])"/>
        </x:scenario>
        <x:scenario label="with id, role, location">
            <x:context href="schematron/schut-to-xspec-012-02.xml"/>
            <x:expect label="assert a1 warn /article[1]/div[1]" test="exists(svrl:schematron-output/svrl:failed-assert[@id = 'a1'][@role = 'warn'][@location = '/article[1]/div[1]'])"/>
            <x:expect label="not assert a2 error /article[1]/div[2]" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:failed-assert[@id = 'a2'][@role = 'error'][@location = '/article[1]/div[2]'])"/>
            <x:expect label="report r1 warn /article[1]/div[3]" test="exists(svrl:schematron-output/svrl:successful-report[@id = 'r1'][@role = 'warn'][@location = '/article[1]/div[3]'])"/>
            <x:expect label="not report r2 info /article[1]/div[4]" test="boolean(svrl:schematron-output[svrl:fired-rule]) and empty(svrl:schematron-output/svrl:successful-report[@id = 'r2'][@role = 'info'][@location = '/article[1]/div[4]'])"/>
        </x:scenario>
    </x:scenario>
</x:description>